package com.sample.demo.web.rest;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;

import com.google.common.io.Files;
import com.google.gson.Gson;
import com.sample.demo.Debug;
import com.sample.demo.model.Attachment;
import com.sample.demo.model.Group;
import com.sample.demo.model.GroupMessage;
import com.sample.demo.model.IndividualChatMessage;
import com.sample.demo.model.UserManagement;
import com.sample.demo.models.repository.AttachemntRepository;
import com.sample.demo.models.repository.GroupMessageRepository;
import com.sample.demo.models.repository.GroupRepository;
import com.sample.demo.models.repository.IndividualChatMessageRepository;
import com.sample.demo.models.repository.UserRepository;
import com.sample.demo.non_model.Message;
import com.sample.demo.security.uti.SecurityUtils;
import com.sample.demo.web.rest.dto.GroupMessageDTO;
import com.sample.demo.web.rest.dto.IndividualChatDTO;

@Controller
@RequestMapping("/company")
public class MessageResource {

	private final Logger log=LoggerFactory.getLogger(this.getClass());
	
	@Value("${server.upload.path}")
	private String fileSaveDirectory;
	
	@Value("${local.upload.path}")
	private String localfileSaveDirectory;

	@Autowired
	UserRepository userRepository;

	@Autowired
	IndividualChatMessageRepository chatMessageRepository;

	@Autowired
	GroupRepository groupRepository;

	@Autowired
	private SimpMessagingTemplate simpMessagingTemplate;

	@Autowired
	GroupMessageRepository groupMessageRepository;

	@Autowired
	private AttachemntRepository attachemntRepository;

	@GetMapping(value = "/message")
	public String getMessage(Model model) {
		return "message";
	}
	

	@GetMapping(value = "/voice")
	public String getVoice(Model model) {
		return "voice";
	}

	

	@GetMapping(value = "/chatHome")
	public String getChatScreen(Model model) {
		List<UserManagement> allusers = userRepository.findAll();
		List<Group> allGroup = groupRepository.findAll();
		String userName = SecurityUtils.getCurrentUserLogin();
		
		

		Optional<UserManagement> opuser = userRepository.findByUserNameIgnoreCase(userName);
		if (opuser.isPresent()) {
			allusers.remove(opuser.get());
		}

		model.addAttribute("group", allGroup);
		model.addAttribute("users", allusers);
		model.addAttribute("userId", opuser.get().getId());
		model.addAttribute("receverId", opuser.get().getUkMessageKey());
		model.addAttribute("userFullName", opuser.get().getFullName());

		return "chatHome";
	}
	
	@GetMapping(value = "/test", produces = MediaType.APPLICATION_JSON_VALUE)
	public String testMethod()
					throws URISyntaxException {
		
		
		List<UserManagement>userListbyName=userRepository.findUserByName("ç”°");
		
		
						return fileSaveDirectory;
		
	}
	@PostMapping(value = "/chatHome", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Message> createMessage(@RequestBody Message messageDTO, MultipartHttpServletRequest request)
			throws URISyntaxException {

		Optional<UserManagement> senderUser = userRepository
				.findByUserNameIgnoreCase(SecurityUtils.getCurrentUserLogin());

		// save message
		Optional<UserManagement> opuser = userRepository.findByUkMessageKey(messageDTO.getReceiveUserId());

		// messageDTO.setSenderUserId(senderUser.get().getId());

		IndividualChatMessage message = new IndividualChatMessage();

		if (opuser.isPresent()) {
			// pushing using websocket

			messageDTO.setSenderUserId(senderUser.get().getUkMessageKey());
			simpMessagingTemplate.convertAndSend("/message/send/individual/" + opuser.get().getUkMessageKey(),
					messageDTO);
			message.setMessageContent(messageDTO.getMessage());
			message.setReceiverId(opuser.get().getId());
			message.setSenderId(senderUser.get().getId());
			message.setRead(true);
			Date date = new Date();
			//message.setCreatedDate(date.toLocaleString());
			chatMessageRepository.save(message);

		}
		return new ResponseEntity<>(messageDTO, HttpStatus.OK);

	}
	
//group message saving

	@PostMapping(value = "/chatHome/sample", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<GroupMessageDTO>> cSample(MultipartHttpServletRequest request) throws URISyntaxException {

		// System.out.println("Methodd ++++++++++++++++++++ "+
		// messageDTO.getReceiveUserId());
		String threadPid = request.getParameterValues("threadPid")[0];
		
		Gson gson = new Gson();
		Message messageDTO = gson.fromJson(threadPid, Message.class);
		MultipartFile file = request.getFile("file");

		GroupMessage grpMessage = new GroupMessage();
		List<GroupMessage> messageList= new ArrayList<GroupMessage>();
		List<GroupMessageDTO> result=new ArrayList<GroupMessageDTO>();
		
		
		Optional<UserManagement> senderUser = userRepository
				.findByUserNameIgnoreCase(SecurityUtils.getCurrentUserLogin());
		
		if (file != null )  {

			try {

				Random rnd = new Random();
				int randmNumber = 100000 + rnd.nextInt(900000);

				
			  String path = request.getServletContext().getRealPath("/");
				  
				  String ppppp=getFileSaveDirectory(fileSaveDirectory);
				  
			  System.out.println(path);
				
			  
			  if(Debug.STATUS){
				  
				  String fileLocation = getFileSaveDirectory("image") + "/" + randmNumber
							+ file.getOriginalFilename();
				  
			  }else{
				  // fileLocation = getFileSaveDirectory("attachmets") + "/" + randmNumber+ file.getOriginalFilename();  
			  }
				String fileLocation = getFileSaveDirectory("image") + "/" + randmNumber
						+ file.getOriginalFilename();
				
				System.out.println("File location ++:"+fileLocation);

				writeToDisk(file.getBytes(), fileLocation, "image");

				Attachment attachmentObj = new Attachment();
				
				 String cwd = System.getProperty("user.dir");
			        System.out.println("Current working directory : " + cwd);
			        
			 

				attachmentObj.setLocation(fileLocation);
				attachmentObj.setActivated(true);
				attachmentObj.setAttachmentName(file.getOriginalFilename());
				attachmentObj.setExtension(file.getContentType());

				attachmentObj.setUploadedDate(LocalDateTime.now());

				attachmentObj = attachemntRepository.save(attachmentObj);

				grpMessage.setAttachemnt(attachmentObj);
				grpMessage.setIsAttachment(true);

			} catch (IOException ex) {
				return new ResponseEntity<>(HttpStatus.NO_CONTENT);
			}

		}
		
		
		
		
		
		messageDTO.setSenderName(senderUser.get().getFullName());


		grpMessage.setIsDelete(false);
		grpMessage.setGroupId(messageDTO.getGroupId());
		grpMessage.setMessageContent(messageDTO.getMessage());
		grpMessage.setIsRead(true);
		grpMessage.setSenderId(messageDTO.getSenderId());
		grpMessage.setSenderName(messageDTO.getSenderName());
		 LocalDateTime now = LocalDateTime.now();  
		grpMessage.setCreatedDate(now);

		groupMessageRepository.save(grpMessage);
		
		messageList.add(grpMessage);
		result=messageList.stream().map(GroupMessageDTO::new).collect(Collectors.toList());
		

		//simpMessagingTemplate.convertAndSend("/message/send/group/" + messageDTO.getReceiveUserId(), messageDTO);
		simpMessagingTemplate.convertAndSend("/message/send/group/" + messageDTO.getReceiveUserId(), result);


		return new ResponseEntity<>(result, HttpStatus.OK);

	}

	@SuppressWarnings("null")
	@PostMapping(value = "/chatHome/upload-attachment", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<IndividualChatDTO>> uploadEditFile(MultipartHttpServletRequest request) {
		String threadPid = request.getParameterValues("threadPid")[0];

		Gson gson = new Gson();
		Message message = gson.fromJson(threadPid, Message.class);

		Optional<UserManagement> senderUser = userRepository
				.findByUserNameIgnoreCase(SecurityUtils.getCurrentUserLogin());

		Optional<UserManagement> opuser = userRepository.findByUkMessageKey(message.getReceiveUserId());
		IndividualChatMessage messageObj = new IndividualChatMessage();
		List<IndividualChatMessage> messageList= new ArrayList<IndividualChatMessage>();
		List<IndividualChatDTO> result=new ArrayList<IndividualChatDTO>();
		
		MultipartFile file = request.getFile("file");
		
		/*if (file == null ) {//&& file.isEmpty()
			//return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else*/

		if (file != null )  {

			try {

				Random rnd = new Random();
				int randmNumber = 100000 + rnd.nextInt(900000);

				
			  String path = request.getServletContext().getRealPath("/");
				  
				 // String ppppp=getFileSaveDirectory(fileSaveDirectory);
				  
			  System.out.println(path);
				
			  
			  if(Debug.STATUS){
				  
				  String fileLocation = getFileSaveDirectory("attachmets") + "/" + randmNumber
							+ file.getOriginalFilename();
				  
			  }else{
				  // fileLocation = getFileSaveDirectory("attachmets") + "/" + randmNumber+ file.getOriginalFilename();  
			  }
				String fileLocation = getFileSaveDirectory("image") + "/" + randmNumber
						+ file.getOriginalFilename();
				
				System.out.println("File location ++:"+fileLocation);

				writeToDisk(file.getBytes(), fileLocation, "image");

				Attachment attachmentObj = new Attachment();
				
				 String cwd = System.getProperty("user.dir");
			        System.out.println("Current working directory : " + cwd);
			        
			 

				attachmentObj.setLocation(fileLocation);
				attachmentObj.setActivated(true);
				attachmentObj.setAttachmentName(file.getOriginalFilename());
				attachmentObj.setExtension(file.getContentType());

				attachmentObj.setUploadedDate(LocalDateTime.now());

				attachmentObj = attachemntRepository.save(attachmentObj);

				messageObj.setAttachemnt(attachmentObj);
				messageObj.setIsAttachment(true);

			} catch (IOException ex) {
				return new ResponseEntity<>(HttpStatus.NO_CONTENT);
			}

		}

		if (opuser.isPresent()) {

			messageObj.setSenderId(senderUser.get().getId());

			messageObj.setMessageContent(message.getMessage());
			messageObj.setReceiverId(opuser.get().getId());
			messageObj.setSenderId(senderUser.get().getId());
			messageObj.setRead(true);
			
			LocalDateTime now = LocalDateTime.now();  
		
			messageObj.setCreatedDate(now);
			
	      
			messageObj = chatMessageRepository.save(messageObj);

			messageObj.setSenderUserUkId(senderUser.get().getUkMessageKey());
			messageList.add(messageObj);
			result=messageList.stream().map(IndividualChatDTO::new).collect(Collectors.toList());
			
		/*	simpMessagingTemplate.convertAndSend("/message/send/individual/" + opuser.get().getUkMessageKey(),
					messageObj);*/
			
			simpMessagingTemplate.convertAndSend("/message/send/individual/" + opuser.get().getUkMessageKey(),
					result);
			
		}

	
		
		return new ResponseEntity<>(result, HttpStatus.OK);
	}

	private void writeToDisk(byte[] fileBytes, String fileLocation, String folderName) {
		try {
			File fileDir = new File(getFileSaveDirectory(folderName));
			if (!fileDir.exists()) {
				//fileDir.mkdirs();
				
				boolean retval = fileDir.mkdirs();
				
				// evaluate the result
				if (retval) {
					System.out.println("Directory : " + fileDir
							+ " created successfully");
				} else {
					System.out.println("Directory : " + fileDir + " creation failed");
				}
			}
			FileCopyUtils.copy(fileBytes, new File(fileLocation));
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}

	private String getFileSaveDirectory(String folderName) {
		// return FILE_SAVE_DIRECTORY +
		// SecurityUtils.getCurrentUsersCompanyId();
		return fileSaveDirectory + folderName;
	}

	@GetMapping(value = "/getMessageAll/{receiverId}")
	public ResponseEntity<Map<LocalDate, List<IndividualChatDTO>>> getMessage(@PathVariable String receiverId)
			throws URISyntaxException {

		Optional<UserManagement> senderUser = userRepository
				.findByUserNameIgnoreCase(SecurityUtils.getCurrentUserLogin());

		Optional<UserManagement> opuser = userRepository.findOneByid(receiverId);
		if (opuser.isPresent()) {

			List<IndividualChatMessage> messageList = chatMessageRepository.findAllByReceiverIdAndSenderId(receiverId,
					senderUser.get().getId());
			
			List<IndividualChatDTO> result=messageList.stream().map(IndividualChatDTO::new).collect(Collectors.toList());
			
		
			
			 Map<LocalDate, List<IndividualChatDTO>> mapValues = result.parallelStream().collect(Collectors.groupingBy(pl -> pl.getDate()));
			 
			 
			 
			 
			 
			 
			// sort by keys, a,b,c..., and return a new LinkedHashMap
		        // toMap() will returns HashMap by default, we need LinkedHashMap to keep the order.
		        Map<LocalDate, List<IndividualChatDTO>> mapObj = mapValues.entrySet().stream()
		                .sorted(Map.Entry.comparingByKey())
		                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,
		                        (oldValue, newValue) -> oldValue, LinkedHashMap::new));


		        // Not Recommend, but it works.
		        //Alternative way to sort a Map by keys, and put it into the "result" map
		        Map<LocalDate, List<IndividualChatDTO>> result2 = new LinkedHashMap<>();
		        mapObj.entrySet().stream()
		                .sorted(Map.Entry.comparingByKey())
		                .forEachOrdered(x -> result2.put(x.getKey(), x.getValue()));

			 
			 
			 
			 // List<Integer> resultzz = new ArrayList(mapValues.keySet());
		     //	 Map<LocalDate, List<IndividualChatDTO>> inv = invert(mapValues);
			// messageList.addAll(chatMessageRepository.findAllByReceiverIdAndSenderId(receiverId,
			// senderUser.get().getId()));
			// messageList.stream().filter(mess->mess.getCreatedDate())
			//List<IndividualChatMessage> reverseView = Lists.reverse(messageList);

			return new ResponseEntity<>(result2, HttpStatus.OK);
		}

		return null;

	}

	@GetMapping(value = "/getGroupMessageAll/{groupId}")
	public ResponseEntity<Map<LocalDate, List<GroupMessageDTO>>> getAllGroupMessageByGrpId(@PathVariable String groupId)
			throws URISyntaxException {

		Optional<Group> group = groupRepository.findById(groupId);

		if (group.isPresent()) {

			List<GroupMessage> groupMessageList = groupMessageRepository.findAllBygroupId(groupId);
			
			List<GroupMessageDTO> result=groupMessageList.stream().map(GroupMessageDTO::new).collect(Collectors.toList());

			 Map<LocalDate, List<GroupMessageDTO>> mapValues = result.parallelStream().collect(Collectors.groupingBy(pl -> pl.getDate()));
				
			 
			 Map<LocalDate, List<GroupMessageDTO>> mapObj = mapValues.entrySet().stream()
		                .sorted(Map.Entry.comparingByKey())
		                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,
		                        (oldValue, newValue) -> oldValue, LinkedHashMap::new));
			 
			 Map<LocalDate, List<GroupMessageDTO>> result2 = new LinkedHashMap<>();
		        mapObj.entrySet().stream()
		                .sorted(Map.Entry.comparingByKey())
		                .forEachOrdered(x -> result2.put(x.getKey(), x.getValue()));

				
			 
			return new ResponseEntity<>(result2, HttpStatus.OK);
		}

		return null;

	}

	@GetMapping(value = "/attachments/{pid}")
	public ResponseEntity<byte[]> getAttachment(@PathVariable String pid) {
		// log.debug("rest web request to get a Coatingtype by pid {}", pid);
		Optional<Attachment> attch = attachemntRepository.findById(pid);
		if (attch.isPresent()) {
			File physicalFile = getPhysicalFileByFile(attch.get().getLocation());
			if (physicalFile.exists()) {
				try {
					return new ResponseEntity<>(Files.toByteArray(physicalFile), HttpStatus.OK);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		byte[] newByte= new byte[0];
		
		return new ResponseEntity<>(newByte, HttpStatus.NO_CONTENT);
	}

	public File getPhysicalFileByFile(String path) {
		File physicalFile = new File(path);
		return physicalFile;
	}
	
	
	
	
	
	@GetMapping(value = "/attachments/getpdf/{attachmentPid}")
	public ResponseEntity<byte[]> getPDF(@PathVariable String attachmentPid) throws IOException {
		//log.debug("Request to upload a file : {}", attachmentPid);
		//Optional<Attachment> opAttachment = attachmentService.findOneByPidAndActivated(attachmentPid, true);
		Optional<Attachment> opAttachment = attachemntRepository.findById(attachmentPid);
		if(opAttachment.isPresent()){
			
		
		File physicalFile = getPhysicalFileByFile(opAttachment.get().getLocation());
		System.out.println(physicalFile);
		if (physicalFile.exists()) {
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.parseMediaType("application/pdf"));
			// String filename = "output.pdf";
			// headers.setContentDispositionFormData(filename, filename);
			headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
			ResponseEntity<byte[]> response = new ResponseEntity<byte[]>(Files.toByteArray(physicalFile), headers,
					HttpStatus.OK);
			return response;
		}
		}
		return null;
	}

	
	@GetMapping("/attachments/download/{attachmentPid}")
	public StreamingResponseBody getSteamingFile(HttpServletResponse response, @PathVariable String attachmentPid)
			throws IOException {
		log.debug("Request to download a file : {}", attachmentPid);
		Optional<Attachment> opAttachment = attachemntRepository.findById(attachmentPid);
		if(opAttachment.isPresent()){
			
		
		File physicalFile = getPhysicalFileByFile(opAttachment.get().getLocation());
		if (physicalFile.exists()) {
			response.setContentType(opAttachment.get().getMimeType());
			response.addHeader("Content-Disposition", "attachment; filename=" + opAttachment.get().getAttachmentName());

			response.setContentLength((int) physicalFile.length());
			InputStream inputStream = new FileInputStream(physicalFile);
			return outputStream -> {
				int nRead;
				byte[] data = new byte[1024];
				while ((nRead = inputStream.read(data, 0, data.length)) != -1) {
					outputStream.write(data, 0, nRead);
				}
				inputStream.close();
			};
		}
		}
		return null;
	}
	
	
	
	@PostMapping(value = "/chatHome/saveMp3", produces = MediaType.APPLICATION_JSON_VALUE)
	public  ResponseEntity<List<IndividualChatDTO>> saveMp3(@RequestBody Message messageDTO) throws URISyntaxException, IOException {

		// TODO
		//System.out.println(messageDTO.getMessage());
		Optional<UserManagement> senderUser = userRepository
				.findByUserNameIgnoreCase(SecurityUtils.getCurrentUserLogin());

		Optional<UserManagement> opuser = userRepository.findByUkMessageKey(messageDTO.getReceiveUserId());
		
		IndividualChatMessage messageObj = new IndividualChatMessage();
		List<IndividualChatMessage> messageList= new ArrayList<IndividualChatMessage>();
		List<IndividualChatDTO> result=new ArrayList<IndividualChatDTO>();
		
		if(opuser.isPresent()){
			
			  String extension=".mp3";
			    byte[] decodedBytes ;
			    String filedata = messageDTO.getMessage();
		        String split[]= filedata.split("data:audio/mp3;base64,");
				String data=split[1];
				decodedBytes =Base64.getDecoder().decode(data);
				Random rnd = new Random();
				int randmNumber = 100000 + rnd.nextInt(900000);
				String fileName = "voiceRecord"+randmNumber;
			
				String fileLocation = getFileSaveDirectory("voice") + "/"+fileName+extension;
				writeToDisk(decodedBytes, fileLocation, "voice");
				Attachment attachmentObj = new Attachment();
				
				attachmentObj.setLocation(fileLocation);
				attachmentObj.setActivated(true);
				attachmentObj.setAttachmentName("Voice File");
				attachmentObj.setExtension(extension);
				attachmentObj.setUploadedDate(LocalDateTime.now());

				attachmentObj = attachemntRepository.save(attachmentObj);

				messageObj.setAttachemnt(attachmentObj);
				messageObj.setIsAttachment(true);
				messageObj.setSenderId(senderUser.get().getId());
				messageObj.setMessageContent("");
				messageObj.setReceiverId(opuser.get().getId());
				messageObj.setSenderId(senderUser.get().getId());
				messageObj.setRead(true);
				messageObj.setCreatedDate(LocalDateTime.now());
				messageObj = chatMessageRepository.save(messageObj);

				messageObj.setSenderUserUkId(senderUser.get().getUkMessageKey());
				messageList.add(messageObj);
				result=messageList.stream().map(IndividualChatDTO::new).collect(Collectors.toList());
				
				simpMessagingTemplate.convertAndSend("/message/send/individual/" + opuser.get().getUkMessageKey(),
						result);
				
				
		}
		
		return new ResponseEntity<>(result, HttpStatus.OK);

	}
	
	@PostMapping(value = "/chatHome/saveToGroupMp3", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<GroupMessageDTO>> saveToGroupMp3(
			@RequestBody Message messageDTO) throws URISyntaxException,
			IOException {

		Optional<UserManagement> senderUser = userRepository
				.findByUserNameIgnoreCase(SecurityUtils.getCurrentUserLogin());
		
		List<GroupMessage> messageList = new ArrayList<GroupMessage>();
		List<GroupMessageDTO> result = new ArrayList<GroupMessageDTO>();

		GroupMessage grpMessage = new GroupMessage();

		String extension = ".mp3";
		byte[] decodedBytes;
		String filedata = messageDTO.getMessage();// base_64 value
		String split[] = filedata.split("data:audio/mp3;base64,");
		String data = split[1];
		decodedBytes = Base64.getDecoder().decode(data);
		Random rnd = new Random();
		int randmNumber = 100000 + rnd.nextInt(900000);
		String fileName = "voiceRecord" + randmNumber;

		String fileLocation = getFileSaveDirectory("voice") + "/" + fileName
				+ extension;
		writeToDisk(decodedBytes, fileLocation, "voice");
		Attachment attachmentObj = new Attachment();

		attachmentObj.setLocation(fileLocation);
		attachmentObj.setActivated(true);
		attachmentObj.setAttachmentName("Voice File");
		attachmentObj.setExtension(extension);
		attachmentObj.setUploadedDate(LocalDateTime.now());
		attachmentObj = attachemntRepository.save(attachmentObj);

		grpMessage.setAttachemnt(attachmentObj);
		grpMessage.setIsAttachment(true);

		grpMessage.setIsDelete(false);
		grpMessage.setGroupId(messageDTO.getGroupId());
		grpMessage.setMessageContent(messageDTO.getMessage());
		grpMessage.setIsRead(true);
		grpMessage.setSenderId(messageDTO.getSenderId());
		grpMessage.setSenderName(messageDTO.getSenderName());
		LocalDateTime now = LocalDateTime.now();
		grpMessage.setCreatedDate(now);

		groupMessageRepository.save(grpMessage);

		messageList.add(grpMessage);
		result = messageList.stream().map(GroupMessageDTO::new)
				.collect(Collectors.toList());

		// simpMessagingTemplate.convertAndSend("/message/send/group/" +
		// messageDTO.getReceiveUserId(), messageDTO);
		simpMessagingTemplate.convertAndSend("/message/send/group/"
				+ messageDTO.getReceiveUserId(), result);

		return new ResponseEntity<>(result, HttpStatus.OK);

	}
	
	
	

}
